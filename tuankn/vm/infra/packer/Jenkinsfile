pipeline {
  options {
    timestamps()
    timeout(time: 180, unit: 'MINUTES')
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '250', daysToKeepStr: '5'))
  }
  agent {
    dockerfile {
      additionalBuildArgs '${DOCKER_NO_CACHE} --tag "packer-tuankn/jenkins-agent:${IMG_LABEL}" --build-arg "TERRAFORM_VERSION=${TERRAFORM_VERSION}" --build-arg "PACKER_VERSION=${PACKER_VERSION}" --build-arg "USER_ID=$(user_id="$(id --user)"; [[ "${user_id}" == 0 ]] && echo "1000" || echo "${user_id}")" --build-arg "GROUP_ID=$(group_id="$(id --group)"; [[ "${group_id}" == 0 ]] && echo "1000" || echo "${group_id}")"'
    }
  } 
  environment {
    AWS_ACCESS_KEY_ID     = credentials('PACKER_AWS_ACCESS_KEY')
    AWS_SECRET_ACCESS_KEY = credentials('PACKER_AWS_SECRET_KEY')
    WORK_SUB_DIR          = 'vm/infra/packer'
    JENKINS_USER_ID       = 'tuankn'
    DESTROY_INFRA      = "${params.DESTROY_INFRA}"
//    JENKINS_API_TOKEN     = credentials('JENKIN_API_TOKEN')
  }
  parameters {
    string(
      name: 'IMG_LABEL',
      defaultValue: 'latest',
      description: 'docker container image label name'
    )
    choice(
      name: 'PACKER_REMOTE_USER',
      choices: [
        'ubuntu',
      ],
      description: 'packer remote user'
    )
    choice(
      name: 'TERRAFORM_VERSION',
      choices: [
        '1.4.4',
      ],
      description: 'terraform version'
    )
    choice(
      name: 'PACKER_VERSION',
      choices: [
        '1.8.6',
      ],
      description: 'packer version'
    )
    booleanParam(name: 'DESTROY_INFRA', defaultValue: false, description: 'Perform Terraform destroy')
  }
  stages {
    stage("terraform-apply") {
      options {
        timeout(time: 10, unit: 'MINUTES')
      }
      steps {
        sh '''#!/usr/bin/env bash
          echo "Shell Process ID: $$"
          cd "${WORK_SUB_DIR}"
          sed -i 's/\r$//' scripts/*
          bash scripts/terraform-infra-jenkins.bash
        '''
      }
    }
    stage("packaging-image") {
      options {
        timeout(time: 150, unit: 'MINUTES')
      }
      steps {
        sh '''#!/usr/bin/env bash
          echo "Shell Process ID: $$"
          set -o errexit
          readonly ROLE_LIST=(
            app
            web
          )
          cd "${WORK_SUB_DIR}"
          for role_name in "${ROLE_LIST[@]}"
          do
            bash scripts/packer-build.sh $role_name
          done
        '''
      }
    }
    stage('Terraform Destroy') {
      steps {
        sh '''#!/usr/bin/env bash
          echo "Shell Process ID: $$"
          cd "${WORK_SUB_DIR}"
          if [ "${DESTROY_INFRA}" == "true" ] 
          then
            bash scripts/post-cleanup.sh
          else 
            echo 'Terraform destroy is not performed'
          fi
        '''
      }
    }
  }
  post {
    success {
      echo "SUCCESSFULL"
    }
    failure {
      echo "FAILED"
    }
  }
}


